{"version":3,"sources":["serviceWorker.ts","state/params-reducer.ts","state/counter-reducer.ts","state/store.ts","utils/localStorageUtils.ts","Button.tsx","Counter/Display.tsx","Counter/Counter.tsx","Params/Value/Value.tsx","Params/DisplayParams.tsx","Params/Params.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","inputMaxValue","inputStartValue","error","inputState","changeInputStateAC","state","type","payload","count","rootReducer","combineReducers","params","action","value","counter","startValue","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","Button","props","onClick","function","disabled","isDisabled","className","class","title","Display","startCount","a","maxCount","Counter","useSelector","dispatch","useDispatch","isIncDisabled","isResetDisabled","Value","InputClass","onChange","e","setInputStateChanger","setValue","currentTarget","inputValue","DisplayParams","inputMaxError","inputStartError","changeMaxValueAC","changeStartValueAC","Params","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0fb73f99.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type InputErrorType = \"maxError\" | \"startError\" | \"all\" | \"none\"\r\n\r\nlet initialState = {\r\n    inputMaxValue: 7,\r\n    inputStartValue: 0,\r\n    error: \"none\" as InputErrorType,\r\n    inputState: true,\r\n}\r\n\r\nexport type ParamsType = typeof initialState\r\n\r\nexport const paramsReducer = (params: ParamsType = initialState, action: ActionType): ParamsType => {\r\n\r\n    switch (action.type) {\r\n        case \"CHANGE-MAX-VALUE\":\r\n            if (action.payload.value === params.inputStartValue) {\r\n                return {...params, error: \"all\", inputMaxValue: action.payload.value}\r\n\r\n            } else if (action.payload.value < params.inputStartValue || action.payload.value < 0) {\r\n                return {...params, error: \"maxError\", inputMaxValue: action.payload.value}\r\n            }\r\n            return {...params, error: \"none\", inputMaxValue: action.payload.value}\r\n\r\n        case \"CHANGE-START-VALUE\":\r\n            if (action.payload.value === params.inputMaxValue) {\r\n                return {...params, error: \"all\", inputStartValue: action.payload.value}\r\n\r\n            } else if (action.payload.value > params.inputMaxValue || action.payload.value < 0) {\r\n                return {...params, error: \"startError\", inputStartValue: action.payload.value}\r\n            }\r\n            return {...params, error: \"none\", inputStartValue: action.payload.value}\r\n\r\n        case \"CHANGE-ERROR\":\r\n            return {...params, error: action.payload.error}\r\n        case \"CHANGE-INPUT-STATE\":\r\n            return {...params, inputState: action.payload.state}\r\n        default:\r\n            return params\r\n    }\r\n}\r\n\r\ntype ActionType = ChangeMaxValueACType | ChangeStartValueACType | ChangeErrorACType | ChangeInputStateACType\r\n\r\nexport type ChangeMaxValueACType = ReturnType<typeof changeMaxValueAC>\r\nexport const changeMaxValueAC = (value: number) => {\r\n    return {\r\n        type: \"CHANGE-MAX-VALUE\",\r\n        payload: {\r\n            value\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeStartValueACType = ReturnType<typeof changeStartValueAC>\r\nexport const changeStartValueAC = (value: number) => {\r\n    return {\r\n        type: \"CHANGE-START-VALUE\",\r\n        payload: {\r\n            value\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeErrorACType = ReturnType<typeof changeErrorAC>\r\nexport const changeErrorAC = (error: InputErrorType) => {\r\n    return {\r\n        type: \"CHANGE-ERROR\",\r\n        payload: {\r\n            error\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ChangeInputStateACType = ReturnType<typeof changeInputStateAC>\r\nexport const changeInputStateAC = (state: boolean) => {\r\n    return {\r\n        type: \"CHANGE-INPUT-STATE\",\r\n        payload: {\r\n            state\r\n        }\r\n    } as const\r\n}\r\n\r\n","import {ChangeMaxValueACType, ChangeStartValueACType} from \"./params-reducer\";\r\n\r\nexport type CounterType = {\r\n    count: number,\r\n}\r\n\r\nconst initialState = {\r\n    count: 0,\r\n}\r\n\r\nexport const counterReducer = (counter:CounterType=initialState, action: ActionType):CounterType=>{\r\n    switch(action.type){\r\n\r\n        case \"CHANGE-COUNT\":\r\n            return {...counter, count:action.payload.value}\r\n        case \"INCREASE-COUNT\":\r\n            return {...counter, count:counter.count + 1}\r\n        case \"RESET-COUNT\":\r\n            return {...counter, count:action.payload.startValue}\r\n        case \"SET-VALUE-FROM-LOCAL-STORAGE\":\r\n            return {...counter, count:action.payload.value}\r\n        default:\r\n            return counter\r\n    }\r\n}\r\n\r\ntype ActionType = ChangeMaxValueACType |ChangeStartValueACType |  ChangeCountACType | IncreaseCountACType | ResetCountACType | setValuesFromLocalStorageACType\r\n\r\ntype ChangeCountACType = ReturnType<typeof ChangeCountAC>\r\nexport const ChangeCountAC = (value:number)=>{\r\n    return {\r\n        type: \"CHANGE-COUNT\",\r\n        payload:{\r\n            value\r\n        }\r\n    }as const\r\n}\r\n\r\ntype IncreaseCountACType = ReturnType<typeof increaseCountAC>\r\nexport const increaseCountAC = ()=>{\r\n    return {\r\n        type: \"INCREASE-COUNT\",\r\n    }as const\r\n}\r\n\r\ntype ResetCountACType = ReturnType<typeof resetCountAC>\r\nexport const resetCountAC = (startValue:number)=>{\r\n    return {\r\n        type: \"RESET-COUNT\",\r\n        payload:{\r\n            startValue\r\n        }\r\n    }as const\r\n}\r\n\r\ntype setValuesFromLocalStorageACType = ReturnType<typeof setValuesFromLSAC>\r\nexport const setValuesFromLSAC = (value:number) => {\r\n    return {\r\n        type: \"SET-VALUE-FROM-LOCAL-STORAGE\",\r\n        payload:{\r\n            value\r\n        }\r\n    } as const\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {paramsReducer} from \"./params-reducer\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {loadState, saveState} from \"../utils/localStorageUtils\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    params: paramsReducer,\r\n    counter: counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter,\r\n        params: store.getState().params\r\n    });\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import {RootStateType} from \"../state/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state:RootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\n\r\ntype UniButtonPropsType = {\r\n    title: string\r\n    function: () => void\r\n    isDisabled: boolean\r\n    class?:string\r\n}\r\n\r\nconst Button = (props: UniButtonPropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <button onClick={props.function}\r\n                    disabled={props.isDisabled}\r\n                    className={`${props.class} button`}>{props.title}</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport '../App.css'\r\nimport {InputErrorType} from \"../state/params-reducer\";\r\n\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    error:InputErrorType\r\n    maxCount: number\r\n    startCount:number\r\n    inputState:boolean\r\n}\r\n\r\nconst Display = (props: DisplayPropsType) => {\r\n\r\n    let title:number | string = props.startCount;\r\n\r\n    if(props.inputState) {\r\n        title = \"enter values and press set\"\r\n    }else{\r\n        title=props.count\r\n    }\r\n    if(props.error !== 'none')\r\n        title = \"Incorrect value\"\r\n\r\n\r\n    let a = \"count_num\"\r\n    if (props.count === props.maxCount || props.error !== 'none') {\r\n        a += \" disabled\"\r\n    } else if(props.inputState){\r\n        a += \" fontSize\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"display_wrapper\">\r\n            <span className={a}>{title}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport Display from './Display'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {CounterType, increaseCountAC, resetCountAC} from \"../state/counter-reducer\";\r\nimport {ParamsType} from \"../state/params-reducer\";\r\n\r\n\r\nconst Counter = () => {\r\n    const params = useSelector<RootStateType, ParamsType>(state=>state.params)\r\n    const counter = useSelector<RootStateType, CounterType>(state=>state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    function increaseCount(){\r\n        dispatch(increaseCountAC())\r\n    }\r\n    function resetCount(){\r\n        dispatch(resetCountAC(params.inputStartValue))\r\n    }\r\n\r\n    let isIncDisabled = params.inputState || (counter.count === params.inputMaxValue)\r\n    let isResetDisabled = params.inputState || (counter.count === params.inputStartValue)\r\n    return (\r\n\r\n        <div className=\"counter\">\r\n            <Display count={counter.count}\r\n                     error={params.error}\r\n                     maxCount={params.inputMaxValue}\r\n                     startCount={params.inputStartValue}\r\n                     inputState={params.inputState}/>\r\n            <div className=\"buttons_wrapper\">\r\n                <Button title=\"Incr\"\r\n                        function={increaseCount}\r\n                        isDisabled={isIncDisabled}/>\r\n                <Button title=\"Reset\"\r\n                        function={resetCount}\r\n                        isDisabled={isResetDisabled}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, {ChangeEvent} from 'react';\r\n\r\n\r\ntype ValueType = {\r\n    title:string\r\n    setValue: (value:number) => void\r\n    inputValue: number\r\n    error:boolean\r\n    setInputStateChanger:()=>void\r\n}\r\n\r\nconst Value = (props:ValueType) => {\r\n\r\n\r\n\r\nlet InputClass = (props.error ? \"error_input\" : \"\") + \" value_input\"\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        // setValue(+e.currentTarget.value)\r\n        props.setInputStateChanger()\r\n        props.setValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"value_wrapper\">\r\n            <span className=\"value_title\">{props.title}</span>\r\n            <input onChange={onChangeHandler}\r\n                   value={props.inputValue}\r\n                   className={InputClass}\r\n                   type=\"number\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Value;","import React from 'react';\r\nimport Value from \"./Value/Value\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {changeInputStateAC, changeMaxValueAC, changeStartValueAC, ParamsType} from \"../state/params-reducer\";\r\n\r\nconst DisplayParams = () => {\r\n\r\n    const params = useSelector<RootStateType, ParamsType>(state => state.params)\r\n    const dispatch = useDispatch()\r\n\r\n    function setMaxValue (value:number){\r\n        dispatch(changeMaxValueAC(value))\r\n    }\r\n    function setStartValue (value:number){\r\n        dispatch(changeStartValueAC(value))\r\n    }\r\n    function setInputStateChanger(){\r\n        dispatch(changeInputStateAC(true))\r\n    }\r\n\r\n    let inputMaxError = params.error === \"maxError\" || params.error ===\"all\"\r\n    let inputStartError = params.error === \"startError\" || params.error ===\"all\"\r\n\r\n    return (\r\n        <div className=\"display_wrapper display_params\">\r\n            <Value title=\"max value:\"\r\n                   setValue={setMaxValue}\r\n                   inputValue={params.inputMaxValue}\r\n                   error={inputMaxError}\r\n                   setInputStateChanger={setInputStateChanger}/>\r\n            <Value title=\"start value:\"\r\n                   setValue={setStartValue}\r\n                   inputValue={params.inputStartValue}\r\n                   error={inputStartError}\r\n                   setInputStateChanger={setInputStateChanger}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayParams;","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport DisplayParams from \"./DisplayParams\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\nimport {changeInputStateAC,  ParamsType} from \"../state/params-reducer\";\r\nimport {ChangeCountAC} from \"../state/counter-reducer\";\r\n\r\n\r\nconst Params = () => {\r\n    const params = useSelector<RootStateType, ParamsType>(state => state.params)\r\n    const dispatch = useDispatch()\r\n\r\n    function setValues(){\r\n        dispatch(changeInputStateAC(false))\r\n        dispatch(ChangeCountAC(params.inputStartValue))\r\n    }\r\n\r\n    return (\r\n        <div className=\"counter\">\r\n            <DisplayParams/>\r\n            <div className=\"buttons_wrapper button_center\">\r\n                <Button title=\"Set\"\r\n                        function={setValues}\r\n                        isDisabled={params.error !== 'none' || !params.inputState}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Params;","import React from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter/Counter\";\r\nimport Params from \"./Params/Params\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Params/>\r\n            <Counter/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}