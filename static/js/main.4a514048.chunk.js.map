{"version":3,"sources":["Button.tsx","Counter/Display.tsx","Counter/Counter.tsx","Params/Value/Value.tsx","Params/DisplayParams.tsx","Params/Params.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","onClick","function","disabled","isDisabled","className","class","title","Display","startCount","inputState","count","error","a","maxCount","Counter","isResetDisabled","increaseCount","resetCount","Value","InputClass","onChange","e","setInputStateChanger","setValue","currentTarget","value","inputValue","type","DisplayParams","inputMaxError","inputStartError","setInputMax","inputMaxValue","checkDisabled","setInputStart","inputStartValue","Params","setValues","App","localStorageMaxCountString","localStorage","getItem","localStorageMaxCount","JSON","parse","localStorageStartCountString","localStorageStartCount","localStorageCountString","localStorageCount","useState","setMaxCount","setStartCount","setInputMaxValue","setInputStartValue","setCount","setError","setInputState","setItem","stringify","newCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+QAqBeA,G,KAZA,SAACC,GAGZ,OACI,oCACI,4BAAQC,QAASD,EAAME,SACfC,SAAUH,EAAMI,WAChBC,UAAS,UAAKL,EAAMM,MAAX,YAA4BN,EAAMO,UCyBhDC,EA7BC,SAACR,GAIb,IAAIO,EAAwBP,EAAMS,WAK9BF,EAHAP,EAAMU,WAGAV,EAAMW,MAFJ,6BAIO,SAAhBX,EAAMY,QACLL,EAAQ,mBAGZ,IAAIM,EAAI,YAOR,OANIb,EAAMW,QAAUX,EAAMc,UAA4B,SAAhBd,EAAMY,MACxCC,GAAK,YACEb,EAAMU,aACbG,GAAK,aAIL,yBAAKR,UAAU,mBACX,0BAAMA,UAAWQ,GAAIN,KCElBQ,EAvBC,SAACf,GAEb,IAAIgB,GAAmBhB,EAAMU,YAAeV,EAAMW,QAAUX,EAAMS,WAClE,OAEI,yBAAKJ,UAAU,WACX,kBAAC,EAAD,CAASM,MAAOX,EAAMW,MACbC,MAAOZ,EAAMY,MACbE,SAAUd,EAAMc,SAChBL,WAAYT,EAAMS,WAClBC,WAAYV,EAAMU,aAC3B,yBAAKL,UAAU,mBACX,kBAAC,EAAD,CAAQE,MAAM,OACNL,SAAUF,EAAMiB,cAChBb,YAAaJ,EAAMU,aAC3B,kBAAC,EAAD,CAAQH,MAAM,QACNL,SAAUF,EAAMkB,WAChBd,WAAYY,OCDrBG,EAnBD,SAACnB,GAEf,IAAIoB,GAAcpB,EAAMY,MAAQ,cAAgB,IAAM,eAMlD,OACI,yBAAKP,UAAU,iBACX,0BAAMA,UAAU,eAAeL,EAAMO,OACrC,2BAAOc,SARS,SAACC,GACrBtB,EAAMuB,sBAAqB,GAC3BvB,EAAMwB,UAAUF,EAAEG,cAAcC,QAOrBA,MAAO1B,EAAM2B,WACbtB,UAAWe,EACXQ,KAAK,aCWTC,EAvBO,SAAC7B,GAEnB,IAAI8B,EAAgC,aAAhB9B,EAAMY,OAAuC,QAAfZ,EAAMY,MACpDmB,EAAkC,eAAhB/B,EAAMY,OAAyC,QAAfZ,EAAMY,MAE5D,OACI,yBAAKP,UAAU,kCACX,kBAAC,EAAD,CAAOE,MAAM,aACNiB,SAAUxB,EAAMgC,YAChBL,WAAY3B,EAAMiC,cAClBrB,MAAOkB,EACPI,cAAelC,EAAMkC,cACrBX,qBAAsBvB,EAAMuB,uBACnC,kBAAC,EAAD,CAAOhB,MAAM,eACNiB,SAAUxB,EAAMmC,cAChBR,WAAY3B,EAAMoC,gBAClBxB,MAAOmB,EACPG,cAAelC,EAAMkC,cACrBX,qBAAsBvB,EAAMuB,yBCKhCc,EApBA,SAACrC,GACZ,OACI,yBAAKK,UAAU,WACX,kBAAC,EAAD,CAAe4B,cAAejC,EAAMiC,cACrBG,gBAAiBpC,EAAMoC,gBACvBJ,YAAahC,EAAMgC,YACnBG,cAAenC,EAAMmC,cACrBD,cAAelC,EAAMkC,cACrBtB,MAAOZ,EAAMY,MAC5BW,qBAAsBvB,EAAMuB,uBAC5B,yBAAKlB,UAAU,iCACX,kBAAC,EAAD,CAAQE,MAAM,MACNL,SAAUF,EAAMsC,UAChBlC,WAA4B,SAAhBJ,EAAMY,OAAoBZ,EAAMU,gBC6ErD6B,MApGf,WAEI,IAAIC,EAA6BC,aAAaC,QAAQ,iBAClDC,EAAuBH,EAA6BI,KAAKC,MAAML,GAA8B,EAE7FM,EAA+BL,aAAaC,QAAQ,mBACpDK,EAAyBD,EAA+BF,KAAKC,MAAMC,GAAgC,EAEnGE,EAA0BP,aAAaC,QAAQ,SAC/CO,EAAoBD,EAA0BJ,KAAKC,MAAMG,GAA2BD,EAExF,EAAgCG,mBAAiBP,GAAjD,mBAAO7B,EAAP,KAAiBqC,EAAjB,KACA,EAAoCD,mBAAiBH,GAArD,mBAAOtC,EAAP,KAAmB2C,EAAnB,KACA,EAA0CF,mBAAiBP,GAA3D,mBAAOV,EAAP,KAAsBoB,EAAtB,KACA,EAA8CH,mBAAiBH,GAA/D,mBAAOX,EAAP,KAAwBkB,EAAxB,KACA,EAA0BJ,mBAAiBD,GAA3C,mBAAOtC,EAAP,KAAc4C,EAAd,KACA,EAA0BL,mBAAyB,QAAnD,mBAAOtC,EAAP,KAAc4C,EAAd,KACA,EAAoCN,oBAAkB,GAAtD,mBAAOxC,EAAP,KAAmB+C,EAAnB,KA4CA,SAASvB,EAActB,GACnB4C,EAAS5C,GAgBb,OACI,yBAAKP,UAAU,OACX,kBAAC,EAAD,CAAQ4B,cAAeA,EACfD,YA3DhB,SAAqBN,GAEbQ,EADAR,EAAQU,GAAmBV,EAAQ,EACrB,WACPA,IAAUU,EACH,MAEA,QAEdV,GAVS,IAUYA,IAXZ,GAYT2B,EAAiB3B,IAmDTY,UAjBhB,WACIa,EAAYlB,GACZmB,EAAchB,GACdmB,EAASnB,GACTqB,GAAc,GACdhB,aAAaiB,QAAQ,gBAAiBd,KAAKe,UAAU1B,IACrDQ,aAAaiB,QAAQ,kBAAmBd,KAAKe,UAAUvB,KAY3CA,gBAAiBA,EACjBD,cAlDhB,SAAuBT,GAEfQ,EADAR,EAAQO,GAAiBP,EAAQ,EACnB,aACPA,IAAUO,EACH,MAEA,QAEdP,GAtBS,IAsBYA,IAvBZ,GAwBT4B,EAAmB5B,GACvBe,aAAaiB,QAAQ,QAASd,KAAKe,UAAUjC,IAC7C6B,EAAS7B,IAwCGQ,cAAeA,EACftB,MAAOA,EACPW,qBAbhB,SAA8Bb,GAC1B+C,EAAc/C,IAaFA,WAAYA,IACpB,kBAAC,EAAD,CAASE,MAAOA,EACPD,MAAOA,EACPM,cA3CjB,WACI,IAAI2C,EAAWjD,EACXiD,EAAW9C,IACXyC,EAASK,EAAW,GACpBnB,aAAaiB,QAAQ,QAASd,KAAKe,UAAUC,EAAW,MAwC/C1C,WApCjB,WACIqC,EAAS9C,GACTgC,aAAaiB,QAAQ,QAASd,KAAKe,UAAUlD,KAmChCK,SAAUA,EACVL,WAAYA,EACZC,WAAYA,MC1FbmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLiE,QAAQjE,MAAMA,EAAMkE,c","file":"static/js/main.4a514048.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype UniButtonPropsType = {\r\n    title: string\r\n    function: () => void\r\n    isDisabled: boolean\r\n    class?:string\r\n}\r\n\r\nconst Button = (props: UniButtonPropsType) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <button onClick={props.function}\r\n                    disabled={props.isDisabled}\r\n                    className={`${props.class} button`}>{props.title}</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport '../App.css'\r\nimport {InputErrorType} from \"../App\";\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    error:InputErrorType\r\n    maxCount: number\r\n    startCount:number\r\n    inputState:boolean\r\n}\r\n\r\nconst Display = (props: DisplayPropsType) => {\r\n\r\n    // let [title, setTitle] =  useState<number | string>()\r\n\r\n    let title:number | string = props.startCount;\r\n\r\n    if(!props.inputState) {\r\n        title = \"enter values and press set\"\r\n    }else{\r\n        title=props.count\r\n    }\r\n    if(props.error !== 'none')\r\n        title = \"Incorrect value\"\r\n\r\n\r\n    let a = \"count_num\"\r\n    if (props.count === props.maxCount || props.error !== 'none') {\r\n        a += \" disabled\"\r\n    } else if(!props.inputState){\r\n        a += \" fontSize\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"display_wrapper\">\r\n            <span className={a}>{title}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport Display from './Display'\r\nimport {InputErrorType} from \"../App\";\r\n\r\ntype CounterPropsType = {\r\n    increaseCount: () => void\r\n    resetCount: () => void\r\n    maxCount: number\r\n    startCount: number\r\n    count: number\r\n    error: InputErrorType\r\n    inputState: boolean\r\n}\r\n\r\nconst Counter = (props: CounterPropsType) => {\r\n\r\n    let isResetDisabled = !props.inputState || (props.count === props.startCount)\r\n    return (\r\n\r\n        <div className=\"counter\">\r\n            <Display count={props.count}\r\n                     error={props.error}\r\n                     maxCount={props.maxCount}\r\n                     startCount={props.startCount}\r\n                     inputState={props.inputState}/>\r\n            <div className=\"buttons_wrapper\">\r\n                <Button title=\"Incr\"\r\n                        function={props.increaseCount}\r\n                        isDisabled={!props.inputState}/>\r\n                <Button title=\"Reset\"\r\n                        function={props.resetCount}\r\n                        isDisabled={isResetDisabled}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, {ChangeEvent} from 'react';\r\nimport {InputErrorType} from \"../../App\";\r\n\r\ntype ValueType = {\r\n    title:string\r\n    setValue: (value:number) => void\r\n    inputValue: number\r\n    error:boolean\r\n    checkDisabled: (error:InputErrorType) => void\r\n    setInputStateChanger:(inputState:boolean)=>void\r\n}\r\n\r\nconst Value = (props:ValueType) => {\r\n\r\nlet InputClass = (props.error ? \"error_input\" : \"\") + \" value_input\"\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        props.setInputStateChanger(false)\r\n        props.setValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"value_wrapper\">\r\n            <span className=\"value_title\">{props.title}</span>\r\n            <input onChange={onChangeHandler}\r\n                   value={props.inputValue}\r\n                   className={InputClass}\r\n                   type=\"number\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Value;","import React from 'react';\r\nimport Value from \"./Value/Value\";\r\nimport {InputErrorType} from \"../App\";\r\n\r\ntype DispalyParamsType = {\r\n    inputMaxValue: number\r\n    inputStartValue: number\r\n    setInputStart: (value: number) => void\r\n    setInputMax: (value: number) => void\r\n    checkDisabled: (error: InputErrorType) => void\r\n    error: InputErrorType\r\n    setInputStateChanger:(inputState:boolean)=>void\r\n}\r\n\r\nconst DisplayParams = (props: DispalyParamsType) => {\r\n\r\n    let inputMaxError = props.error === \"maxError\" || props.error ===\"all\"\r\n    let inputStartError = props.error === \"startError\" || props.error ===\"all\"\r\n\r\n    return (\r\n        <div className=\"display_wrapper display_params\">\r\n            <Value title=\"max value:\"\r\n                   setValue={props.setInputMax}\r\n                   inputValue={props.inputMaxValue}\r\n                   error={inputMaxError}\r\n                   checkDisabled={props.checkDisabled}\r\n                   setInputStateChanger={props.setInputStateChanger}/>\r\n            <Value title=\"start value:\"\r\n                   setValue={props.setInputStart}\r\n                   inputValue={props.inputStartValue}\r\n                   error={inputStartError}\r\n                   checkDisabled={props.checkDisabled}\r\n                   setInputStateChanger={props.setInputStateChanger}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayParams;","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport DisplayParams from \"./DisplayParams\";\r\nimport {InputErrorType} from \"../App\";\r\n\r\ntype ParamsType = {\r\n    inputMaxValue:number\r\n    setInputMax: (value:number)=> void\r\n    inputStartValue: number\r\n    setInputStart: (value:number)=>void\r\n    checkDisabled: (error:InputErrorType) => void\r\n    setValues:()=>void\r\n    error:InputErrorType\r\n    setInputStateChanger:(inputState:boolean)=>void\r\n    inputState:boolean\r\n}\r\n\r\nconst Params = (props: ParamsType) => {\r\n    return (\r\n        <div className=\"counter\">\r\n            <DisplayParams inputMaxValue={props.inputMaxValue}\r\n                           inputStartValue={props.inputStartValue}\r\n                           setInputMax={props.setInputMax}\r\n                           setInputStart={props.setInputStart}\r\n                           checkDisabled={props.checkDisabled}\r\n                           error={props.error}\r\n            setInputStateChanger={props.setInputStateChanger}/>\r\n            <div className=\"buttons_wrapper button_center\">\r\n                <Button title=\"Set\"\r\n                        function={props.setValues}\r\n                        isDisabled={props.error !== 'none' || props.inputState}\r\n                        />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Params;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter/Counter\";\r\nimport Params from \"./Params/Params\";\r\n\r\nexport type InputErrorType = \"maxError\" | \"startError\" | \"all\" | \"none\"\r\n\r\nfunction App() {\r\n\r\n    let localStorageMaxCountString = localStorage.getItem('maxCountValue')\r\n    let localStorageMaxCount = localStorageMaxCountString ? JSON.parse(localStorageMaxCountString) : 7\r\n\r\n    let localStorageStartCountString = localStorage.getItem('startCountValue')\r\n    let localStorageStartCount = localStorageStartCountString ? JSON.parse(localStorageStartCountString) : 0\r\n\r\n    let localStorageCountString = localStorage.getItem('count')\r\n    let localStorageCount = localStorageCountString ? JSON.parse(localStorageCountString) : localStorageStartCount\r\n\r\n    const [maxCount, setMaxCount] = useState<number>(localStorageMaxCount)\r\n    const [startCount, setStartCount] = useState<number>(localStorageStartCount)\r\n    const [inputMaxValue, setInputMaxValue] = useState<number>(localStorageMaxCount)\r\n    const [inputStartValue, setInputStartValue] = useState<number>(localStorageStartCount)\r\n    const [count, setCount] = useState<number>(localStorageCount)\r\n    const [error, setError] = useState<InputErrorType>(\"none\")\r\n    const [inputState, setInputState] = useState<boolean>(true)\r\n\r\n    const minValue = -1\r\n    const maxValue = 99\r\n\r\n    function setInputMax(value: number) {\r\n        if (value < inputStartValue || value < 0) {\r\n            checkDisabled(\"maxError\")\r\n        } else if (value === inputStartValue) {\r\n            checkDisabled(\"all\")\r\n        } else {\r\n            checkDisabled(\"none\")\r\n        }\r\n        if (value <= maxValue && value >= minValue)\r\n            setInputMaxValue(value)\r\n    }\r\n\r\n    function setInputStart(value: number) {\r\n        if (value > inputMaxValue || value < 0) {\r\n            checkDisabled(\"startError\")\r\n        } else if (value === inputMaxValue) {\r\n            checkDisabled(\"all\")\r\n        } else {\r\n            checkDisabled(\"none\")\r\n        }\r\n        if (value <= maxValue && value >= minValue)\r\n            setInputStartValue(value)\r\n        localStorage.setItem('count', JSON.stringify(value))\r\n        setCount(value)\r\n    }\r\n\r\n    function increaseCount() {\r\n        let newCount = count\r\n        if (newCount < maxCount) {\r\n            setCount(newCount + 1)\r\n            localStorage.setItem('count', JSON.stringify(newCount + 1))\r\n        }\r\n    }\r\n\r\n    function resetCount() {\r\n        setCount(startCount)\r\n        localStorage.setItem('count', JSON.stringify(startCount))\r\n    }\r\n\r\n    function checkDisabled(error: InputErrorType) {\r\n        setError(error)\r\n    }\r\n\r\n    function setValues() {\r\n        setMaxCount(inputMaxValue)\r\n        setStartCount(inputStartValue)\r\n        setCount(inputStartValue)\r\n        setInputState(true)\r\n        localStorage.setItem('maxCountValue', JSON.stringify(inputMaxValue))\r\n        localStorage.setItem('startCountValue', JSON.stringify(inputStartValue))\r\n    }\r\n\r\n    function setInputStateChanger(inputState: boolean) {\r\n        setInputState(inputState)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Params inputMaxValue={inputMaxValue}\r\n                    setInputMax={setInputMax}\r\n                    setValues={setValues}\r\n                    inputStartValue={inputStartValue}\r\n                    setInputStart={setInputStart}\r\n                    checkDisabled={checkDisabled}\r\n                    error={error}\r\n                    setInputStateChanger={setInputStateChanger}\r\n                    inputState={inputState}/>\r\n            <Counter error={error}\r\n                     count={count}\r\n                     increaseCount={increaseCount}\r\n                     resetCount={resetCount}\r\n                     maxCount={maxCount}\r\n                     startCount={startCount}\r\n                     inputState={inputState}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}